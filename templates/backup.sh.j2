#!/bin/bash
#
# {{ ansible_managed }}
#
# Backup for simple servers - shell script.
#
# @author Jeff Geerling, 2014, 2017
# Modified by jmansar, 2022 

declare -i ERRORS_COUNT
declare -i BACKUP_OPS_COUNT

ERRORS_COUNT=0
BACKUP_OPS_COUNT=0

ErrorHandler () {
    ((++ERRORS_COUNT))
    echo "Error occured at line number $LINENO: $BASH_COMMAND" 
}

trap ErrorHandler ERR

# Common variables.
REMOTE="{{ backup_remote_connection }}"
RSYNC=/usr/bin/rsync

# Backup individual directories.
{% for directory in backup_directories %}
$RSYNC -aqz -e 'ssh {{ backup_remote_connection_ssh_options }}' --delete --exclude-from '{{ backup_path }}/backup-exclude.txt' {{ directory }} $REMOTE:{{ backup_remote_base_path }}/{{ backup_identifier }} && ((++BACKUP_OPS_COUNT)) || ((++ERRORS_COUNT))
{% endfor %}

{% if backup_mysql %}
# MySQL variables.
MYSQL=/usr/bin/mysql
MYSQLDUMP=/usr/bin/mysqldump
{% if backup_mysql_credential_file != '' %}
MYSQL_CREDENTIALS="--defaults-extra-file={{ backup_mysql_credential_file }}"
{% else %}
MYSQL_CREDENTIALS="-u {{ backup_mysql_user }} -p'{{ backup_mysql_password }}'"
{% endif %}

# Dump all MySQL databases.
DATABASES=`$MYSQL $MYSQL_CREDENTIALS -e "SHOW DATABASES;" | grep -Ev '(Database|information_schema|performance_schema|mysql)'`
for DB in $DATABASES
do
  # Dump the database with mysqldump (piped through gzip to conserve IO).
  $MYSQLDUMP $MYSQL_CREDENTIALS --single-transaction --quick --lock-tables=false $DB | gzip -f -6 > {{ backup_path }}/databases/$DB.sql.gz
done

# Sync the databases directory.
$RSYNC -aqz -e 'ssh {{ backup_remote_connection_ssh_options }}' {{ backup_path }}/databases $REMOTE:{{ backup_remote_base_path }}/{{ backup_identifier }} && ((++BACKUP_OPS_COUNT)) || ((++ERRORS_COUNT))
{% endif %}

if [ $ERRORS_COUNT -eq 0 ]; then
    echo "Backup completed successfully. Count: $BACKUP_OPS_COUNT"
else
    echo "Error occured while executing backup script"
    exit $ERRORS_COUNT
fi

